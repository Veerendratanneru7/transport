@model MT.Controllers.SuperUserEditVm
@{
    ViewData["Title"] = "Edit User";
}
<div class="container mt-4">
    <h2>Edit User</h2>
    <form asp-action="Edit" method="post" class="mt-3">
        @Html.AntiForgeryToken()
        <input type="hidden" asp-for="Id" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row g-3">
            <div class="col-md-6">
                <label asp-for="Name" class="form-label"></label>
                <input asp-for="Name" class="form-control" required />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label asp-for="Email" class="form-label"></label>
                <input asp-for="Email" class="form-control" type="email" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label asp-for="Username" class="form-label"></label>
                <input asp-for="Username" class="form-control" required minlength="3" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label class="form-label">Role</label>
                <select asp-for="Role" class="form-select" asp-items="ViewBag.Roles"></select>
                <span asp-validation-for="Role" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label asp-for="Phone" class="form-label"></label>
                <input asp-for="Phone" class="form-control" type="tel" id="phoneEdit" placeholder="974########" />
                <div class="form-text" id="phoneHelp"></div>
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <label asp-for="QID" class="form-label"></label>
                <input asp-for="QID" class="form-control" id="qidInput" maxlength="11" pattern="^\d{11}$" inputmode="numeric" />
                <div class="form-text" id="qidHelp"></div>
                <span asp-validation-for="QID" class="text-danger"></span>
            </div>
            <div class="col-md-6 form-check mt-4">
                <input asp-for="IsActive" class="form-check-input" />
                <label asp-for="IsActive" class="form-check-label">Active</label>
            </div>
        </div>
        <div class="mt-4 d-flex gap-2">
            <button type="submit" class="btn btn-primary">Save</button>
            <a class="btn btn-secondary" href="/SuperAdminUsers">Cancel</a>
        </div>
    </form>
</div>
@section Scripts{ 
    @await Html.PartialAsync("_ValidationScriptsPartial") 
    <script>
      (function(){
        function digitsOnly(s){ return (s||'').replace(/\D/g,''); }
        function normalizePhone(v){
          let d = digitsOnly(v);
          if (d.startsWith('974')){
            d = d.substring(0,11);
          } else {
            d = '974' + d;
            d = d.substring(0,11);
          }
          return d;
        }

        // Phone normalize + uniqueness
        var el = document.getElementById('phoneEdit');
        var phoneHelp = document.getElementById('phoneHelp');
        var phoneTimer;
        function checkPhone(){
          var v = normalizePhone(el.value);
          el.value = v;
          if (v.length !== 11){
            phoneHelp.textContent = 'Phone must be 11 digits (974########).';
            phoneHelp.className = 'form-text text-muted';
            return;
          }
          var excludeId = document.querySelector('input[name="Id"]').value;
          fetch('/SuperAdminUsers/CheckPhone?phone=' + encodeURIComponent(v) + '&excludeId=' + encodeURIComponent(excludeId))
            .then(r=>r.json()).then(data=>{
              if (data.ok){ phoneHelp.textContent = 'Phone is available'; phoneHelp.className = 'form-text text-success'; }
              else { phoneHelp.textContent = 'Phone already exists'; phoneHelp.className = 'form-text text-danger'; }
            }).catch(()=>{ phoneHelp.textContent=''; });
        }
        if (el){
          el.addEventListener('input', function(){ clearTimeout(phoneTimer); phoneTimer = setTimeout(checkPhone, 250); });
          el.value = normalizePhone(el.value);
          checkPhone();
        }

        // QID exact length + hint
        var qid = document.getElementById('qidInput');
        var qidHelp = document.getElementById('qidHelp');
        var qidTimer;
        function normalizeQid(v){ return digitsOnly(v).substring(0,11); }
        function checkQid(){
          var n = normalizeQid(qid.value);
          qid.value = n;
          if (!n){ qidHelp.textContent=''; return; }
          if (n.length !== 11){ qidHelp.textContent='QID must be exactly 11 digits'; qidHelp.className='form-text text-muted'; return; }
          var excludeId = document.querySelector('input[name="Id"]').value;
          fetch('/SuperAdminUsers/CheckQid?qid=' + encodeURIComponent(n) + '&excludeId=' + encodeURIComponent(excludeId))
            .then(r=>r.json()).then(data=>{
              if (data.ok){ qidHelp.textContent='QID is available'; qidHelp.className='form-text text-success'; }
              else { qidHelp.textContent='QID already exists'; qidHelp.className='form-text text-danger'; }
            }).catch(()=>{ qidHelp.textContent=''; });
        }
        if (qid){
          qid.addEventListener('input', function(){ clearTimeout(qidTimer); qidTimer = setTimeout(checkQid, 300); });
          checkQid();
        }
      })();
    </script>
}
